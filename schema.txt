schema {
  query: BillQuery
}

type Account {
  id: Int!
  number: String!
  isActive: Boolean!
  type: AccountType!
  customerId: Int!
  customer: Customer!
  bills(where: BillFilterInput order: [BillSortInput!]): [Bill!]!
}

type Bill {
  id: Int!
  number: Int!
  month: Month!
  isActive: Boolean!
  status: Status!
  dueDate: Date!
  amount: Decimal!
  customerId: Int!
  customer: Customer!
  accountId: Int!
  account: Account!
}

type BillQuery {
  bills("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: BillFilterInput order: [BillSortInput!]): BillsConnection
}

"A connection to a list of items."
type BillsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [BillsEdge!]
  "A flattened list of the nodes."
  nodes: [Bill!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

"An edge in a connection."
type BillsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Bill!
}

type Customer {
  id: Int!
  name: String!
  identityNumber: Int!
  age: Int!
  accounts(where: AccountFilterInput order: [AccountSortInput!]): [Account!]!
  bills(where: BillFilterInput order: [BillSortInput!]): [Bill!]!
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

input AccountFilterInput {
  and: [AccountFilterInput!]
  or: [AccountFilterInput!]
  id: IntOperationFilterInput
  number: StringOperationFilterInput
  isActive: BooleanOperationFilterInput
  type: AccountTypeOperationFilterInput
  customerId: IntOperationFilterInput
  customer: CustomerFilterInput
  bills: ListFilterInputTypeOfBillFilterInput
}

input AccountSortInput {
  id: SortEnumType
  number: SortEnumType
  isActive: SortEnumType
  type: SortEnumType
  customerId: SortEnumType
  customer: CustomerSortInput
}

input AccountTypeOperationFilterInput {
  eq: AccountType
  neq: AccountType
  in: [AccountType!]
  nin: [AccountType!]
}

input BillFilterInput {
  and: [BillFilterInput!]
  or: [BillFilterInput!]
  id: IntOperationFilterInput
  number: IntOperationFilterInput
  month: MonthOperationFilterInput
  isActive: BooleanOperationFilterInput
  status: StatusOperationFilterInput
  dueDate: DateOperationFilterInput
  amount: DecimalOperationFilterInput
  customerId: IntOperationFilterInput
  customer: CustomerFilterInput
  accountId: IntOperationFilterInput
  account: AccountFilterInput
}

input BillSortInput {
  id: SortEnumType
  number: SortEnumType
  month: SortEnumType
  isActive: SortEnumType
  status: SortEnumType
  dueDate: SortEnumType
  amount: SortEnumType
  customerId: SortEnumType
  customer: CustomerSortInput
  accountId: SortEnumType
  account: AccountSortInput
}

input BooleanOperationFilterInput {
  eq: Boolean
  neq: Boolean
}

input CustomerFilterInput {
  and: [CustomerFilterInput!]
  or: [CustomerFilterInput!]
  id: IntOperationFilterInput
  name: StringOperationFilterInput
  identityNumber: IntOperationFilterInput
  age: IntOperationFilterInput
  accounts: ListFilterInputTypeOfAccountFilterInput
  bills: ListFilterInputTypeOfBillFilterInput
}

input CustomerSortInput {
  id: SortEnumType
  name: SortEnumType
  identityNumber: SortEnumType
  age: SortEnumType
}

input DateOperationFilterInput {
  eq: Date
  neq: Date
  in: [Date]
  nin: [Date]
  gt: Date
  ngt: Date
  gte: Date
  ngte: Date
  lt: Date
  nlt: Date
  lte: Date
  nlte: Date
}

input DecimalOperationFilterInput {
  eq: Decimal
  neq: Decimal
  in: [Decimal]
  nin: [Decimal]
  gt: Decimal
  ngt: Decimal
  gte: Decimal
  ngte: Decimal
  lt: Decimal
  nlt: Decimal
  lte: Decimal
  nlte: Decimal
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input ListFilterInputTypeOfAccountFilterInput {
  all: AccountFilterInput
  none: AccountFilterInput
  some: AccountFilterInput
  any: Boolean
}

input ListFilterInputTypeOfBillFilterInput {
  all: BillFilterInput
  none: BillFilterInput
  some: BillFilterInput
  any: Boolean
}

input MonthOperationFilterInput {
  eq: Month
  neq: Month
  in: [Month!]
  nin: [Month!]
}

input StatusOperationFilterInput {
  eq: Status
  neq: Status
  in: [Status!]
  nin: [Status!]
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

enum AccountType {
  DOMESTIC
  COMMERCIAL
}

enum Month {
  JANUARY
  FEBRUARY
  MARCH
  APRIL
  MAY
  JUNE
  JULY
  AUGUST
  SEPTEMBER
  OCTOBER
  NOVEMBER
  DECEMBER
}

enum SortEnumType {
  ASC
  DESC
}

enum Status {
  PAID
  NOT_PAID
}